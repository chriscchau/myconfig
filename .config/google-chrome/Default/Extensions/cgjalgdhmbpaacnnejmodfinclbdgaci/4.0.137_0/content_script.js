// Generated by CoffeeScript 1.10.0
(function() {
  var enableLog, settings, syntaxtic;

  settings = false;

  enableLog = false;

  chrome.extension.sendRequest({
    method: "getSettingsWithAction"
  }, function(response) {
    settings = response.settings;
    if (syntaxtic.windowLoaded) {
      enableLog && console.log('Loaded');
      return syntaxtic.doHighlight();
    } else {
      enableLog && console.log('Issuing onload');
      return window.onload = function() {
        syntaxtic.windowLoaded = true;
        return syntaxtic.doHighlight();
      };
    }
  });

  syntaxtic = {
    windowLoaded: false,
    doHighlight: function() {
      var applyPageSpecificSettings, beautifyCsv, changeFontSize, checkForObjectiveC, hasHtmlContentType, highlight, loadScript;
      if (!settings) {
        return;
      }
      hasHtmlContentType = function() {
        var content, httpEquiv, len, metaTags, n, result, tag;
        enableLog && console.log('has html content?');
        result = false;
        metaTags = document.getElementsByTagName('meta');
        enableLog && console.log('Meta Tags:', metaTags);
        for (n = 0, len = metaTags.length; n < len; n++) {
          tag = metaTags[n];
          enableLog && console.log('Tag:', tag, metaTags[tag]);
          httpEquiv = tag.httpEquiv;
          content = tag.content;
          if (httpEquiv === 'undefined') {
            continue;
          }
          if (httpEquiv.toLowerCase() === "content-type" && content.toLowerCase().match("html")) {
            result = true;
            break;
          }
        }
        return result;
      };
      highlight = function() {
        var classString, css2, css3;
        if (document.body.innerHTML.match("003ew0hdafa1119dadfa39aje")) {
          return;
        }
        if (document.body.firstChild !== null && document.getElementsByTagName('pre')[0] === document.body.firstChild) {
          classString = "brush: " + window.brushAlias;
          if (settings.disableQuickCode) {
            classString += "; quick-code: false";
          }
          document.body.innerHTML = "<!-- 003ew0hdafa1119dadfa39aje -->\n<script type=\"text/syntaxhighlighter\" class=\"" + classString + "\">\n  <![CDATA[" + document.body.firstChild.innerHTML + "]]>\n</script>";
        }
        css2 = document.createElement("link");
        css2.href = chrome.extension.getURL("styles/" + settings.theme);
        css2.type = "text/css";
        css2.rel = "stylesheet";
        document.head.appendChild(css2);
        css3 = document.createElement("style");
        css3.appendChild(document.createTextNode(".syntaxhighlighter .toolbar {display:none}"));
        document.head.appendChild(css3);
        return SyntaxHighlighter.highlight();
      };
      beautifyCsv = function() {
        var csvArray, csvArrayDecoded, firstDimension, i, j, k, l, len, len1, len2, len3, m, maxColLengthsHash, n, newCsvData, o, orig, p, q, r, ref, ref1, ref2, results, results1, s, secondDimension, strData, strDecode, t;
        strData = document.body.firstChild.innerHTML;
        csvArray = CsvToArray(strData, ",");
        maxColLengthsHash = (function() {
          results = [];
          for (var n = 1, ref = csvArray[0].length; 1 <= ref ? n <= ref : n >= ref; 1 <= ref ? n++ : n--){ results.push(n); }
          return results;
        }).apply(this).map(function(i) {
          return -1;
        });
        csvArrayDecoded = (function() {
          results1 = [];
          for (var o = 1, ref1 = csvArray.length; 1 <= ref1 ? o <= ref1 : o >= ref1; 1 <= ref1 ? o++ : o--){ results1.push(o); }
          return results1;
        }).apply(this).map(function(i) {
          return [];
        });
        for (i = p = 0, len = csvArray.length; p < len; i = ++p) {
          firstDimension = csvArray[i];
          for (j = q = 0, len1 = firstDimension.length; q < len1; j = ++q) {
            orig = firstDimension[j];
            strDecode = html_entity_decode(orig);
            csvArrayDecoded[i][j] = strDecode;
            if (strDecode.length > maxColLengthsHash[j]) {
              maxColLengthsHash[j] = strDecode.length;
            }
          }
        }
        newCsvData = "";
        for (k = r = 0, len2 = csvArray.length; r < len2; k = ++r) {
          firstDimension = csvArray[k];
          for (l = s = 0, len3 = firstDimension.length; s < len3; l = ++s) {
            secondDimension = firstDimension[l];
            for (m = t = 0, ref2 = maxColLengthsHash[l] - csvArrayDecoded[k][l].length; 0 <= ref2 ? t <= ref2 : t >= ref2; m = 0 <= ref2 ? ++t : --t) {
              newCsvData += " ";
            }
            newCsvData += secondDimension;
            if (l + 1 === firstDimension.length) {
              newCsvData += '\n';
            } else {
              newCsvData += ", ";
            }
          }
        }
        document.body.firstChild.innerHTML = newCsvData;
        return window.brushAlias = "plain";
      };
      checkForObjectiveC = function() {
        var strData;
        strData = document.body.innerHTML;
        if (strData.match(/(@interface|@protocol|@INTERFACE|@PROTOCOL)/) != null) {
          return "objc";
        } else {
          return "cpp";
        }
      };
      changeFontSize = function() {
        var newNode, styleElement;
        styleElement = document.createElement('style');
        styleElement.type = 'text/css';
        styleElement.id = 'fontOverride';
        document.getElementsByTagName('head')[0].appendChild(styleElement);
        newNode = document.createTextNode(".syntaxhighlighter, .syntaxhighlighter code, .syntaxhighlighter div {\n font-size: " + settings.fontSize + " !important;\n font-family: '" + settings.fontFamily + "' !important;\n }");
        return styleElement.appendChild(newNode);
      };
      applyPageSpecificSettings = function() {
        if (settings.gutterBlacklist.indexOf(document.location.href) > -1) {
          loadScript(chrome.extension.getURL("toggle_gutter.js"));
        }
        if (settings.highlightBlacklist.indexOf(document.location.href) > -1) {
          return loadScript(chrome.extension.getURL("toggle_highlight.js"));
        }
      };
      loadScript = function(url, callback) {
        var head, script;
        head = document.getElementsByTagName('head')[0];
        script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onreadystatechange = callback;
        script.onload = callback;
        return head.appendChild(script);
      };
      enableLog && console.log('Main');
      if ((window.brushAlias != null) && window.brushAlias !== "" && !hasHtmlContentType()) {
        if (window.brushAlias === 'csv') {
          beautifyCsv();
        }
        if (window.brushAlias === 'cHeader') {
          window.brushAlias = checkForObjectiveC();
        }
        highlight();
        changeFontSize();
        return applyPageSpecificSettings();
      }
    }
  };

  window.onload = function() {
    return syntaxtic.windowLoaded = true;
  };

}).call(this);
